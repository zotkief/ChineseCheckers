@startuml

title Diagram klas chinskich warcab

' pakiety
package "Server Side" {
    class Server {
        - games : List<Game>
        - clients : List<ClientHandler>
        - port : int
        - serverSocket : ServerSocket
        - EXECUTOR : ExecutorService
        + startServer() : void
        + acceptConnections() : void
        + removeClient(client : ClientHandler) : void
        + createGameSession(int : playerCount) : void
        + main() : void
    }

    class ClientHandler implements Runnable {
        - socket : Socket
        - out : OutputStream
        - in : InputStream
        + run() : void
        + send(msg : Message) : void
    }
}

package "Client Side" {
    class Client {
        design pattern: Observer
        --
        - socket : Socket
        - out : OutputStream
        - in : InputStream
        - scanner : Scanner
        - running : boolean
        + start() : void
        + connectToServer() : void
        + sendMove(move : Move) : void
        + receiveUpdate(msg : Message) : void
        + main() : void
    }

}

package "Game Logic" {
    class Game {
        - board : Board
        - players : List<Player>
        - currentPlayer : Player
        + addPlayer(player : Player) : void
        + startGame() : void
        + processMove(move : Move) : void
        + isValidMove(move : Move) : boolean
        + nextTurn() : void
    }
    class Board {
        - cells : Map<Position, Cell>
        + initialize() : void
        + getCell(pos : Position) : Cell
        + movePiece(move : Move) : void
        + isValidMove(move : Move) : boolean
    }

    class Player {
        Design pattern: Factory?
        --
        - name : String
        - color : Color
        - pieces : List<Piece>
        + makeMove() : Move
    }

    class Move {
        Design pattern: Command
        --
        - from : Position
        - to : Position
        - player : Player
        + execute(board : Board) : void
    }
    class Cell {
        - position : Position
        - piece : Piece
        + Cell(position : Position)
        + isOccupied() : boolean
    }

    class Piece {
        - owner : Player
        - position : Position
        + moveTo(pos : Position) : void
    }
    class Position {
        - q : int
        - r : int
        + Position(q : int, r : int)
        + getQ() : int
        + getR() : int
        + getNeighbors() : List<Position>
        + equals(o : Object) : boolean
        + hashCode() : int
    }
}

package "Communication" {
    interface Message {
        + getType() : MessageType
    }

    enum MessageType {
        MOVE
        UPDATE
        JOIN
        START_GAME
        ERROR
    }

    class JoinGameMessage {
        - playerCount : int
        + JoinGameMessage(playerCount : int)
        + getPlayerCount() : int
        + getType() : MessageType
    }

    class MoveMessage {
        - move : Move
        + MoveMessage(move : Move)
        + getMove() : Move
        + getType() : MessageType
    }

    class UpdateMessage {
        - board : Board
        + UpdateMessage(board : Board)
        + getBoard() : Board
        + getType() : MessageType
    }

    class ErrorMessage {
        - message : String
        + ErrorMessage(message : String)
        + getMessage() : String
        + getType() : MessageType
    }
}

' Relationships
Server "1" o-- "*" ClientHandler : manages

Client "1" --> "1" ClientHandler : sends messages

Client <--> Message

Server o-- Game : manages
Game o-- Board
Game o-- Player
Player o-- Piece
Board o-- Cell
Cell o-- Position
Piece o-- Position
Move --> Position : from
Move --> Position : to
Move --> Player

Game --> Move : processMove()

Message <|-- JoinGameMessage
Message <|-- MoveMessage
Message <|-- UpdateMessage
Message <|-- ErrorMessage


@enduml
